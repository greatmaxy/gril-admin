// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Food {
  food_id         Int      @id @default(autoincrement())
  food_name       String
  food_description String?
  food_price      Decimal
  food_ingredients String?
  food_type       String?
  food_image_url  String?

  translations    Food_Translations[]

  Menu_Item Menu_Item[]
}

model Food_Translations {
  translation_id     Int      @id @default(autoincrement())
  food_id            Int
  language_code      String
  food_name_tl       String?
  food_description_tl String?
  food_price_tl      Decimal?

  food               Food     @relation(fields: [food_id], references: [food_id], onDelete: Cascade)
}


model Menu {
  menu_id          Int       @id @default(autoincrement())
  menu_name        String
  menu_description String?
  active_from      DateTime
  active_until     DateTime
  is_active        Boolean   @default(true)

  menu_items       Menu_Item[]
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
}

model Menu_Item {
  menu_item_id     Int       @id @default(autoincrement())
  menu_id          Int
  food_id          Int
  is_available     Boolean   @default(true)
  display_order    Int?

  menu             Menu      @relation(fields: [menu_id], references: [menu_id], onDelete: Cascade)
  food             Food      @relation(fields: [food_id], references: [food_id], onDelete: Cascade)

  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  @@unique([menu_id, food_id]) // Ensure a food item can only appear once per menu
}

